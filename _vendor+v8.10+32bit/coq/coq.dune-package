(lang dune 2.0)
(name coq)
(library
 (name coq.clib)
 (kind normal)
 (synopsis "Coq's Utility Library [general purpose]")
 (archives (byte clib/clib.cma) (native clib/clib.cmxa))
 (plugins (byte clib/clib.cma) (native clib/clib.cmxs))
 (native_archives clib/clib.a)
 (requires str unix threads)
 (modes byte)
 (modules
  (unwrapped
   ((name Backtrace) (obj_name backtrace) (visibility public) (impl) (intf))
   ((name Bigint) (obj_name bigint) (visibility public) (impl) (intf))
   ((name CArray) (obj_name cArray) (visibility public) (impl) (intf))
   ((name CEphemeron) (obj_name cEphemeron) (visibility public) (impl) (intf))
   ((name CList) (obj_name cList) (visibility public) (impl) (intf))
   ((name CMap) (obj_name cMap) (visibility public) (impl) (intf))
   ((name CObj) (obj_name cObj) (visibility public) (impl) (intf))
   ((name CSet) (obj_name cSet) (visibility public) (impl) (intf))
   ((name CSig) (obj_name cSig) (visibility public) (intf))
   ((name CStack) (obj_name cStack) (visibility public) (impl) (intf))
   ((name CString) (obj_name cString) (visibility public) (impl) (intf))
   ((name CThread) (obj_name cThread) (visibility public) (impl) (intf))
   ((name CUnix) (obj_name cUnix) (visibility public) (impl) (intf))
   ((name Diff2) (obj_name diff2) (visibility public) (impl) (intf))
   ((name Dyn) (obj_name dyn) (visibility public) (impl) (intf))
   ((name Exninfo) (obj_name exninfo) (visibility public) (impl) (intf))
   ((name HMap) (obj_name hMap) (visibility public) (impl) (intf))
   ((name Hashcons) (obj_name hashcons) (visibility public) (impl) (intf))
   ((name Hashset) (obj_name hashset) (visibility public) (impl) (intf))
   ((name Heap) (obj_name heap) (visibility public) (impl) (intf))
   ((name IStream) (obj_name iStream) (visibility public) (impl) (intf))
   ((name Int) (obj_name int) (visibility public) (impl) (intf))
   ((name Minisys) (obj_name minisys) (visibility public) (impl))
   ((name Monad) (obj_name monad) (visibility public) (impl) (intf))
   ((name Option) (obj_name option) (visibility public) (impl) (intf))
   ((name OrderedType)
    (obj_name orderedType)
    (visibility public)
    (impl)
    (intf))
   ((name Predicate) (obj_name predicate) (visibility public) (impl) (intf))
   ((name Range) (obj_name range) (visibility public) (impl) (intf))
   ((name Segmenttree)
    (obj_name segmenttree)
    (visibility public)
    (impl)
    (intf))
   ((name Store) (obj_name store) (visibility public) (impl) (intf))
   ((name Terminal) (obj_name terminal) (visibility public) (impl) (intf))
   ((name Trie) (obj_name trie) (visibility public) (impl) (intf))
   ((name Unicode) (obj_name unicode) (visibility public) (impl) (intf))
   ((name Unicodetable) (obj_name unicodetable) (visibility public) (impl))
   ((name Unionfind) (obj_name unionfind) (visibility public) (impl) (intf)))))
(library
 (name coq.config)
 (kind normal)
 (synopsis "Coq Configuration Variables")
 (archives (byte config/config.cma) (native config/config.cmxa))
 (plugins (byte config/config.cma) (native config/config.cmxs))
 (native_archives config/config.a)
 (modes byte)
 (modules
  (singleton
   (name Coq_config)
   (obj_name coq_config)
   (visibility public)
   (impl)
   (intf))))
(library
 (name coq.engine)
 (kind normal)
 (synopsis "Coq's Tactic Engine")
 (archives (byte engine/engine.cma) (native engine/engine.cmxa))
 (plugins (byte engine/engine.cma) (native engine/engine.cmxs))
 (native_archives engine/engine.a)
 (requires coq.library)
 (modes byte)
 (modules
  (unwrapped
   ((name EConstr) (obj_name eConstr) (visibility public) (impl) (intf))
   ((name Evar_kinds) (obj_name evar_kinds) (visibility public) (impl) (intf))
   ((name Evarutil) (obj_name evarutil) (visibility public) (impl) (intf))
   ((name Evd) (obj_name evd) (visibility public) (impl) (intf))
   ((name Ftactic) (obj_name ftactic) (visibility public) (impl) (intf))
   ((name Logic_monad)
    (obj_name logic_monad)
    (visibility public)
    (impl)
    (intf))
   ((name Namegen) (obj_name namegen) (visibility public) (impl) (intf))
   ((name Nameops) (obj_name nameops) (visibility public) (impl) (intf))
   ((name Proofview) (obj_name proofview) (visibility public) (impl) (intf))
   ((name Proofview_monad)
    (obj_name proofview_monad)
    (visibility public)
    (impl)
    (intf))
   ((name Termops) (obj_name termops) (visibility public) (impl) (intf))
   ((name UState) (obj_name uState) (visibility public) (impl) (intf))
   ((name UnivGen) (obj_name univGen) (visibility public) (impl) (intf))
   ((name UnivMinim) (obj_name univMinim) (visibility public) (impl) (intf))
   ((name UnivNames) (obj_name univNames) (visibility public) (impl) (intf))
   ((name UnivProblem)
    (obj_name univProblem)
    (visibility public)
    (impl)
    (intf))
   ((name UnivSubst) (obj_name univSubst) (visibility public) (impl) (intf))
   ((name Univops) (obj_name univops) (visibility public) (impl) (intf)))))
(library
 (name coq.gramlib)
 (kind normal)
 (archives (byte gramlib/gramlib.cma) (native gramlib/gramlib.cmxa))
 (plugins (byte gramlib/gramlib.cma) (native gramlib/gramlib.cmxs))
 (native_archives gramlib/gramlib.a)
 (requires coq.lib)
 (main_module_name Gramlib)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Gramlib)
   (modules
    ((name Gramext)
     (obj_name gramlib__Gramext)
     (visibility public)
     (impl)
     (intf))
    ((name Grammar)
     (obj_name gramlib__Grammar)
     (visibility public)
     (impl)
     (intf))
    ((name Plexing)
     (obj_name gramlib__Plexing)
     (visibility public)
     (impl)
     (intf))
    ((name Ploc) (obj_name gramlib__Ploc) (visibility public) (impl) (intf)))
   (alias_module
    (name Gramlib)
    (obj_name gramlib)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.interp)
 (kind normal)
 (synopsis "Coq's Syntactic Interpretation for AST [notations, implicits]")
 (archives (byte interp/interp.cma) (native interp/interp.cmxa))
 (plugins (byte interp/interp.cma) (native interp/interp.cmxs))
 (native_archives interp/interp.a)
 (requires coq.pretyping)
 (modes byte)
 (modules
  (unwrapped
   ((name Constrexpr) (obj_name constrexpr) (visibility public) (impl))
   ((name Constrexpr_ops)
    (obj_name constrexpr_ops)
    (visibility public)
    (impl)
    (intf))
   ((name Constrextern)
    (obj_name constrextern)
    (visibility public)
    (impl)
    (intf))
   ((name Constrintern)
    (obj_name constrintern)
    (visibility public)
    (impl)
    (intf))
   ((name Declare) (obj_name declare) (visibility public) (impl) (intf))
   ((name Discharge) (obj_name discharge) (visibility public) (impl) (intf))
   ((name Dumpglob) (obj_name dumpglob) (visibility public) (impl) (intf))
   ((name Genintern) (obj_name genintern) (visibility public) (impl) (intf))
   ((name Impargs) (obj_name impargs) (visibility public) (impl) (intf))
   ((name Implicit_quantifiers)
    (obj_name implicit_quantifiers)
    (visibility public)
    (impl)
    (intf))
   ((name Modintern) (obj_name modintern) (visibility public) (impl) (intf))
   ((name Notation) (obj_name notation) (visibility public) (impl) (intf))
   ((name Notation_ops)
    (obj_name notation_ops)
    (visibility public)
    (impl)
    (intf))
   ((name Notation_term) (obj_name notation_term) (visibility public) (impl))
   ((name NumTok) (obj_name numTok) (visibility public) (impl) (intf))
   ((name Reserve) (obj_name reserve) (visibility public) (impl) (intf))
   ((name Smartlocate)
    (obj_name smartlocate)
    (visibility public)
    (impl)
    (intf))
   ((name Stdarg) (obj_name stdarg) (visibility public) (impl) (intf))
   ((name Syntax_def) (obj_name syntax_def) (visibility public) (impl) (intf)))))
(library
 (name coq.kernel)
 (kind normal)
 (synopsis "The Coq Kernel")
 (archives (byte kernel/kernel.cma) (native kernel/kernel.cmxa))
 (plugins (byte kernel/kernel.cma) (native kernel/kernel.cmxs))
 (native_archives kernel/kernel.a)
 (requires coq.lib coq.vm dynlink)
 (modes byte)
 (modules
  (unwrapped
   ((name CClosure) (obj_name cClosure) (visibility public) (impl) (intf))
   ((name CPrimitives)
    (obj_name cPrimitives)
    (visibility public)
    (impl)
    (intf))
   ((name Cbytecodes) (obj_name cbytecodes) (visibility public) (impl) (intf))
   ((name Cbytegen) (obj_name cbytegen) (visibility public) (impl) (intf))
   ((name Cemitcodes) (obj_name cemitcodes) (visibility public) (impl) (intf))
   ((name Clambda) (obj_name clambda) (visibility public) (impl) (intf))
   ((name Constr) (obj_name constr) (visibility public) (impl) (intf))
   ((name Context) (obj_name context) (visibility public) (impl) (intf))
   ((name Conv_oracle)
    (obj_name conv_oracle)
    (visibility public)
    (impl)
    (intf))
   ((name Cooking) (obj_name cooking) (visibility public) (impl) (intf))
   ((name Copcodes) (obj_name copcodes) (visibility public) (impl))
   ((name Csymtable) (obj_name csymtable) (visibility public) (impl) (intf))
   ((name Declarations) (obj_name declarations) (visibility public) (impl))
   ((name Declareops) (obj_name declareops) (visibility public) (impl) (intf))
   ((name Entries) (obj_name entries) (visibility public) (impl))
   ((name Environ) (obj_name environ) (visibility public) (impl) (intf))
   ((name Esubst) (obj_name esubst) (visibility public) (impl) (intf))
   ((name Evar) (obj_name evar) (visibility public) (impl) (intf))
   ((name IndTyping) (obj_name indTyping) (visibility public) (impl) (intf))
   ((name Indtypes) (obj_name indtypes) (visibility public) (impl) (intf))
   ((name Inductive) (obj_name inductive) (visibility public) (impl) (intf))
   ((name Mod_subst) (obj_name mod_subst) (visibility public) (impl) (intf))
   ((name Mod_typing) (obj_name mod_typing) (visibility public) (impl) (intf))
   ((name Modops) (obj_name modops) (visibility public) (impl) (intf))
   ((name Names) (obj_name names) (visibility public) (impl) (intf))
   ((name Nativecode) (obj_name nativecode) (visibility public) (impl) (intf))
   ((name Nativeconv) (obj_name nativeconv) (visibility public) (impl) (intf))
   ((name Nativelambda)
    (obj_name nativelambda)
    (visibility public)
    (impl)
    (intf))
   ((name Nativelib) (obj_name nativelib) (visibility public) (impl) (intf))
   ((name Nativelibrary)
    (obj_name nativelibrary)
    (visibility public)
    (impl)
    (intf))
   ((name Nativevalues)
    (obj_name nativevalues)
    (visibility public)
    (impl)
    (intf))
   ((name Opaqueproof)
    (obj_name opaqueproof)
    (visibility public)
    (impl)
    (intf))
   ((name Primred) (obj_name primred) (visibility public) (impl) (intf))
   ((name Reduction) (obj_name reduction) (visibility public) (impl) (intf))
   ((name Retroknowledge)
    (obj_name retroknowledge)
    (visibility public)
    (impl)
    (intf))
   ((name Retypeops) (obj_name retypeops) (visibility public) (impl) (intf))
   ((name Safe_typing)
    (obj_name safe_typing)
    (visibility public)
    (impl)
    (intf))
   ((name Sorts) (obj_name sorts) (visibility public) (impl) (intf))
   ((name Subtyping) (obj_name subtyping) (visibility public) (impl) (intf))
   ((name Term) (obj_name term) (visibility public) (impl) (intf))
   ((name Term_typing)
    (obj_name term_typing)
    (visibility public)
    (impl)
    (intf))
   ((name TransparentState)
    (obj_name transparentState)
    (visibility public)
    (impl)
    (intf))
   ((name Type_errors)
    (obj_name type_errors)
    (visibility public)
    (impl)
    (intf))
   ((name Typeops) (obj_name typeops) (visibility public) (impl) (intf))
   ((name UGraph) (obj_name uGraph) (visibility public) (impl) (intf))
   ((name Uint63) (obj_name uint63) (visibility public) (impl) (intf))
   ((name Univ) (obj_name univ) (visibility public) (impl) (intf))
   ((name Vars) (obj_name vars) (visibility public) (impl) (intf))
   ((name Vconv) (obj_name vconv) (visibility public) (impl) (intf))
   ((name Vm) (obj_name vm) (visibility public) (impl) (intf))
   ((name Vmvalues) (obj_name vmvalues) (visibility public) (impl) (intf)))))
(library
 (name coq.lib)
 (kind normal)
 (synopsis "Coq's Utility Library [coq-specific]")
 (archives (byte lib/lib.cma) (native lib/lib.cmxa))
 (plugins (byte lib/lib.cma) (native lib/lib.cmxs))
 (native_archives lib/lib.a)
 (requires coq.clib coq.config)
 (modes byte)
 (modules
  (unwrapped
   ((name AcyclicGraph)
    (obj_name acyclicGraph)
    (visibility public)
    (impl)
    (intf))
   ((name Aux_file) (obj_name aux_file) (visibility public) (impl) (intf))
   ((name CAst) (obj_name cAst) (visibility public) (impl) (intf))
   ((name CErrors) (obj_name cErrors) (visibility public) (impl) (intf))
   ((name CProfile) (obj_name cProfile) (visibility public) (impl) (intf))
   ((name CWarnings) (obj_name cWarnings) (visibility public) (impl) (intf))
   ((name Control) (obj_name control) (visibility public) (impl) (intf))
   ((name CoqProject_file)
    (obj_name coqProject_file)
    (visibility public)
    (impl)
    (intf))
   ((name DAst) (obj_name dAst) (visibility public) (impl) (intf))
   ((name Envars) (obj_name envars) (visibility public) (impl) (intf))
   ((name Explore) (obj_name explore) (visibility public) (impl) (intf))
   ((name Feedback) (obj_name feedback) (visibility public) (impl) (intf))
   ((name Flags) (obj_name flags) (visibility public) (impl) (intf))
   ((name Future) (obj_name future) (visibility public) (impl) (intf))
   ((name Genarg) (obj_name genarg) (visibility public) (impl) (intf))
   ((name Hook) (obj_name hook) (visibility public) (impl) (intf))
   ((name Loc) (obj_name loc) (visibility public) (impl) (intf))
   ((name Pp) (obj_name pp) (visibility public) (impl) (intf))
   ((name Pp_diff) (obj_name pp_diff) (visibility public) (impl) (intf))
   ((name RemoteCounter)
    (obj_name remoteCounter)
    (visibility public)
    (impl)
    (intf))
   ((name Rtree) (obj_name rtree) (visibility public) (impl) (intf))
   ((name Spawn) (obj_name spawn) (visibility public) (impl) (intf))
   ((name Stateid) (obj_name stateid) (visibility public) (impl) (intf))
   ((name System) (obj_name system) (visibility public) (impl) (intf))
   ((name Util) (obj_name util) (visibility public) (impl) (intf))
   ((name Xml_datatype) (obj_name xml_datatype) (visibility public) (intf)))))
(library
 (name coq.library)
 (kind normal)
 (synopsis "Coq's Loadable Libraries (vo) Support")
 (archives (byte library/library.cma) (native library/library.cmxa))
 (plugins (byte library/library.cma) (native library/library.cmxs))
 (native_archives library/library.a)
 (requires coq.kernel)
 (modes byte)
 (modules
  (unwrapped
   ((name Coqlib) (obj_name coqlib) (visibility public) (impl) (intf))
   ((name Decl_kinds) (obj_name decl_kinds) (visibility public) (impl))
   ((name Declaremods)
    (obj_name declaremods)
    (visibility public)
    (impl)
    (intf))
   ((name Decls) (obj_name decls) (visibility public) (impl) (intf))
   ((name Global) (obj_name global) (visibility public) (impl) (intf))
   ((name Globnames) (obj_name globnames) (visibility public) (impl) (intf))
   ((name Goptions) (obj_name goptions) (visibility public) (impl) (intf))
   ((name Keys) (obj_name keys) (visibility public) (impl) (intf))
   ((name Kindops) (obj_name kindops) (visibility public) (impl) (intf))
   ((name Lib) (obj_name lib) (visibility public) (impl) (intf))
   ((name Libnames) (obj_name libnames) (visibility public) (impl) (intf))
   ((name Libobject) (obj_name libobject) (visibility public) (impl) (intf))
   ((name Library) (obj_name library) (visibility public) (impl) (intf))
   ((name Loadpath) (obj_name loadpath) (visibility public) (impl) (intf))
   ((name Nametab) (obj_name nametab) (visibility public) (impl) (intf))
   ((name States) (obj_name states) (visibility public) (impl) (intf))
   ((name Summary) (obj_name summary) (visibility public) (impl) (intf)))))
(library
 (name coq.parsing)
 (kind normal)
 (archives (byte parsing/parsing.cma) (native parsing/parsing.cmxa))
 (plugins (byte parsing/parsing.cma) (native parsing/parsing.cmxs))
 (native_archives parsing/parsing.a)
 (requires coq.gramlib coq.proofs)
 (modes byte)
 (modules
  (unwrapped
   ((name CLexer) (obj_name cLexer) (visibility public) (impl) (intf))
   ((name Extend) (obj_name extend) (visibility public) (impl))
   ((name G_constr) (obj_name g_constr) (visibility public) (impl))
   ((name G_prim) (obj_name g_prim) (visibility public) (impl))
   ((name Notation_gram) (obj_name notation_gram) (visibility public) (impl))
   ((name Notgram_ops)
    (obj_name notgram_ops)
    (visibility public)
    (impl)
    (intf))
   ((name Pcoq) (obj_name pcoq) (visibility public) (impl) (intf))
   ((name Ppextend) (obj_name ppextend) (visibility public) (impl) (intf))
   ((name Tok) (obj_name tok) (visibility public) (impl) (intf)))))
(library
 (name coq.plugins.btauto)
 (kind normal)
 (synopsis "Coq's btauto plugin")
 (archives
  (byte plugins/btauto/btauto_plugin.cma)
  (native plugins/btauto/btauto_plugin.cmxa))
 (plugins
  (byte plugins/btauto/btauto_plugin.cma)
  (native plugins/btauto/btauto_plugin.cmxs))
 (native_archives plugins/btauto/btauto_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Btauto_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Btauto_plugin)
   (modules
    ((name G_btauto)
     (obj_name btauto_plugin__G_btauto)
     (visibility public)
     (impl))
    ((name Refl_btauto)
     (obj_name btauto_plugin__Refl_btauto)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Btauto_plugin)
    (obj_name btauto_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.cc)
 (kind normal)
 (synopsis "Coq's congruence closure plugin")
 (archives (byte plugins/cc/cc_plugin.cma) (native plugins/cc/cc_plugin.cmxa))
 (plugins (byte plugins/cc/cc_plugin.cma) (native plugins/cc/cc_plugin.cmxs))
 (native_archives plugins/cc/cc_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Cc_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Cc_plugin)
   (modules
    ((name Ccalgo)
     (obj_name cc_plugin__Ccalgo)
     (visibility public)
     (impl)
     (intf))
    ((name Ccproof)
     (obj_name cc_plugin__Ccproof)
     (visibility public)
     (impl)
     (intf))
    ((name Cctac)
     (obj_name cc_plugin__Cctac)
     (visibility public)
     (impl)
     (intf))
    ((name G_congruence)
     (obj_name cc_plugin__G_congruence)
     (visibility public)
     (impl)))
   (alias_module
    (name Cc_plugin)
    (obj_name cc_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.derive)
 (kind normal)
 (synopsis "Coq's derive plugin")
 (archives
  (byte plugins/derive/derive_plugin.cma)
  (native plugins/derive/derive_plugin.cmxa))
 (plugins
  (byte plugins/derive/derive_plugin.cma)
  (native plugins/derive/derive_plugin.cmxs))
 (native_archives plugins/derive/derive_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Derive_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Derive_plugin)
   (modules
    ((name Derive)
     (obj_name derive_plugin__Derive)
     (visibility public)
     (impl)
     (intf))
    ((name G_derive)
     (obj_name derive_plugin__G_derive)
     (visibility public)
     (impl)))
   (alias_module
    (name Derive_plugin)
    (obj_name derive_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.extraction)
 (kind normal)
 (synopsis "Coq's extraction plugin")
 (archives
  (byte plugins/extraction/extraction_plugin.cma)
  (native plugins/extraction/extraction_plugin.cmxa))
 (plugins
  (byte plugins/extraction/extraction_plugin.cma)
  (native plugins/extraction/extraction_plugin.cmxs))
 (native_archives plugins/extraction/extraction_plugin.a)
 (requires num coq.plugins.ltac)
 (main_module_name Extraction_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Extraction_plugin)
   (modules
    ((name Big) (obj_name extraction_plugin__Big) (visibility public) (impl))
    ((name Common)
     (obj_name extraction_plugin__Common)
     (visibility public)
     (impl)
     (intf))
    ((name Extract_env)
     (obj_name extraction_plugin__Extract_env)
     (visibility public)
     (impl)
     (intf))
    ((name Extraction)
     (obj_name extraction_plugin__Extraction)
     (visibility public)
     (impl)
     (intf))
    ((name G_extraction)
     (obj_name extraction_plugin__G_extraction)
     (visibility public)
     (impl))
    ((name Haskell)
     (obj_name extraction_plugin__Haskell)
     (visibility public)
     (impl)
     (intf))
    ((name Json)
     (obj_name extraction_plugin__Json)
     (visibility public)
     (impl)
     (intf))
    ((name Miniml)
     (obj_name extraction_plugin__Miniml)
     (visibility public)
     (impl)
     (intf))
    ((name Mlutil)
     (obj_name extraction_plugin__Mlutil)
     (visibility public)
     (impl)
     (intf))
    ((name Modutil)
     (obj_name extraction_plugin__Modutil)
     (visibility public)
     (impl)
     (intf))
    ((name Ocaml)
     (obj_name extraction_plugin__Ocaml)
     (visibility public)
     (impl)
     (intf))
    ((name Scheme)
     (obj_name extraction_plugin__Scheme)
     (visibility public)
     (impl)
     (intf))
    ((name Table)
     (obj_name extraction_plugin__Table)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Extraction_plugin)
    (obj_name extraction_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.firstorder)
 (kind normal)
 (synopsis "Coq's first order logic solver plugin")
 (archives
  (byte plugins/firstorder/ground_plugin.cma)
  (native plugins/firstorder/ground_plugin.cmxa))
 (plugins
  (byte plugins/firstorder/ground_plugin.cma)
  (native plugins/firstorder/ground_plugin.cmxs))
 (native_archives plugins/firstorder/ground_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Ground_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Ground_plugin)
   (modules
    ((name Formula)
     (obj_name ground_plugin__Formula)
     (visibility public)
     (impl)
     (intf))
    ((name G_ground)
     (obj_name ground_plugin__G_ground)
     (visibility public)
     (impl))
    ((name Ground)
     (obj_name ground_plugin__Ground)
     (visibility public)
     (impl)
     (intf))
    ((name Instances)
     (obj_name ground_plugin__Instances)
     (visibility public)
     (impl)
     (intf))
    ((name Rules)
     (obj_name ground_plugin__Rules)
     (visibility public)
     (impl)
     (intf))
    ((name Sequent)
     (obj_name ground_plugin__Sequent)
     (visibility public)
     (impl)
     (intf))
    ((name Unify)
     (obj_name ground_plugin__Unify)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Ground_plugin)
    (obj_name ground_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.fourier)
 (kind normal)
 (synopsis "Coq's fourier plugin")
 (archives
  (byte plugins/fourier/fourier_plugin.cma)
  (native plugins/fourier/fourier_plugin.cmxa))
 (plugins
  (byte plugins/fourier/fourier_plugin.cma)
  (native plugins/fourier/fourier_plugin.cmxs))
 (native_archives plugins/fourier/fourier_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Fourier_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Fourier_plugin)
   (alias_module
    (name Fourier_plugin)
    (obj_name fourier_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.funind)
 (kind normal)
 (synopsis "Coq's functional induction plugin")
 (archives
  (byte plugins/funind/recdef_plugin.cma)
  (native plugins/funind/recdef_plugin.cmxa))
 (plugins
  (byte plugins/funind/recdef_plugin.cma)
  (native plugins/funind/recdef_plugin.cmxs))
 (native_archives plugins/funind/recdef_plugin.a)
 (requires coq.plugins.extraction)
 (main_module_name Recdef_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Recdef_plugin)
   (modules
    ((name Functional_principles_proofs)
     (obj_name recdef_plugin__Functional_principles_proofs)
     (visibility public)
     (impl)
     (intf))
    ((name Functional_principles_types)
     (obj_name recdef_plugin__Functional_principles_types)
     (visibility public)
     (impl)
     (intf))
    ((name G_indfun)
     (obj_name recdef_plugin__G_indfun)
     (visibility public)
     (impl))
    ((name Glob_term_to_relation)
     (obj_name recdef_plugin__Glob_term_to_relation)
     (visibility public)
     (impl)
     (intf))
    ((name Glob_termops)
     (obj_name recdef_plugin__Glob_termops)
     (visibility public)
     (impl)
     (intf))
    ((name Indfun)
     (obj_name recdef_plugin__Indfun)
     (visibility public)
     (impl)
     (intf))
    ((name Indfun_common)
     (obj_name recdef_plugin__Indfun_common)
     (visibility public)
     (impl)
     (intf))
    ((name Invfun)
     (obj_name recdef_plugin__Invfun)
     (visibility public)
     (impl)
     (intf))
    ((name Recdef)
     (obj_name recdef_plugin__Recdef)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Recdef_plugin)
    (obj_name recdef_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.int63_syntax)
 (kind normal)
 (synopsis "Coq syntax plugin: int63")
 (archives
  (byte plugins/int63_syntax/int63_syntax_plugin.cma)
  (native plugins/int63_syntax/int63_syntax_plugin.cmxa))
 (plugins
  (byte plugins/int63_syntax/int63_syntax_plugin.cma)
  (native plugins/int63_syntax/int63_syntax_plugin.cmxs))
 (native_archives plugins/int63_syntax/int63_syntax_plugin.a)
 (requires coq.vernac)
 (main_module_name Int63_syntax_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Int63_syntax_plugin)
   (modules
    ((name Int63_syntax)
     (obj_name int63_syntax_plugin__Int63_syntax)
     (visibility public)
     (impl)))
   (alias_module
    (name Int63_syntax_plugin)
    (obj_name int63_syntax_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.ltac)
 (kind normal)
 (synopsis "Coq's LTAC tactic language")
 (archives
  (byte plugins/ltac/ltac_plugin.cma)
  (native plugins/ltac/ltac_plugin.cmxa))
 (plugins
  (byte plugins/ltac/ltac_plugin.cma)
  (native plugins/ltac/ltac_plugin.cmxs))
 (native_archives plugins/ltac/ltac_plugin.a)
 (requires coq.stm)
 (main_module_name Ltac_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Ltac_plugin)
   (modules
    ((name Coretactics)
     (obj_name ltac_plugin__Coretactics)
     (visibility public)
     (impl))
    ((name Evar_tactics)
     (obj_name ltac_plugin__Evar_tactics)
     (visibility public)
     (impl)
     (intf))
    ((name Extraargs)
     (obj_name ltac_plugin__Extraargs)
     (visibility public)
     (impl)
     (intf))
    ((name Extratactics)
     (obj_name ltac_plugin__Extratactics)
     (visibility public)
     (impl)
     (intf))
    ((name G_auto) (obj_name ltac_plugin__G_auto) (visibility public) (impl))
    ((name G_class)
     (obj_name ltac_plugin__G_class)
     (visibility public)
     (impl))
    ((name G_eqdecide)
     (obj_name ltac_plugin__G_eqdecide)
     (visibility public)
     (impl))
    ((name G_ltac) (obj_name ltac_plugin__G_ltac) (visibility public) (impl))
    ((name G_obligations)
     (obj_name ltac_plugin__G_obligations)
     (visibility public)
     (impl))
    ((name G_rewrite)
     (obj_name ltac_plugin__G_rewrite)
     (visibility public)
     (impl))
    ((name G_tactic)
     (obj_name ltac_plugin__G_tactic)
     (visibility public)
     (impl))
    ((name Pltac)
     (obj_name ltac_plugin__Pltac)
     (visibility public)
     (impl)
     (intf))
    ((name Pptactic)
     (obj_name ltac_plugin__Pptactic)
     (visibility public)
     (impl)
     (intf))
    ((name Profile_ltac)
     (obj_name ltac_plugin__Profile_ltac)
     (visibility public)
     (impl)
     (intf))
    ((name Profile_ltac_tactics)
     (obj_name ltac_plugin__Profile_ltac_tactics)
     (visibility public)
     (impl))
    ((name Rewrite)
     (obj_name ltac_plugin__Rewrite)
     (visibility public)
     (impl)
     (intf))
    ((name Tacarg)
     (obj_name ltac_plugin__Tacarg)
     (visibility public)
     (impl)
     (intf))
    ((name Taccoerce)
     (obj_name ltac_plugin__Taccoerce)
     (visibility public)
     (impl)
     (intf))
    ((name Tacentries)
     (obj_name ltac_plugin__Tacentries)
     (visibility public)
     (impl)
     (intf))
    ((name Tacenv)
     (obj_name ltac_plugin__Tacenv)
     (visibility public)
     (impl)
     (intf))
    ((name Tacexpr)
     (obj_name ltac_plugin__Tacexpr)
     (visibility public)
     (impl)
     (intf))
    ((name Tacintern)
     (obj_name ltac_plugin__Tacintern)
     (visibility public)
     (impl)
     (intf))
    ((name Tacinterp)
     (obj_name ltac_plugin__Tacinterp)
     (visibility public)
     (impl)
     (intf))
    ((name Tacsubst)
     (obj_name ltac_plugin__Tacsubst)
     (visibility public)
     (impl)
     (intf))
    ((name Tactic_debug)
     (obj_name ltac_plugin__Tactic_debug)
     (visibility public)
     (impl)
     (intf))
    ((name Tactic_matching)
     (obj_name ltac_plugin__Tactic_matching)
     (visibility public)
     (impl)
     (intf))
    ((name Tactic_option)
     (obj_name ltac_plugin__Tactic_option)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Ltac_plugin)
    (obj_name ltac_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.micromega)
 (kind normal)
 (synopsis "Coq's micromega plugin")
 (archives
  (byte plugins/micromega/micromega_plugin.cma)
  (native plugins/micromega/micromega_plugin.cmxa))
 (plugins
  (byte plugins/micromega/micromega_plugin.cma)
  (native plugins/micromega/micromega_plugin.cmxs))
 (native_archives plugins/micromega/micromega_plugin.a)
 (requires num coq.plugins.ltac)
 (main_module_name Micromega_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Micromega_plugin)
   (modules
    ((name Certificate)
     (obj_name micromega_plugin__Certificate)
     (visibility public)
     (impl)
     (intf))
    ((name Coq_micromega)
     (obj_name micromega_plugin__Coq_micromega)
     (visibility public)
     (impl)
     (intf))
    ((name G_micromega)
     (obj_name micromega_plugin__G_micromega)
     (visibility public)
     (impl)
     (intf))
    ((name Itv)
     (obj_name micromega_plugin__Itv)
     (visibility public)
     (impl)
     (intf))
    ((name Mfourier)
     (obj_name micromega_plugin__Mfourier)
     (visibility public)
     (impl)
     (intf))
    ((name Micromega)
     (obj_name micromega_plugin__Micromega)
     (visibility public)
     (impl)
     (intf))
    ((name Mutils)
     (obj_name micromega_plugin__Mutils)
     (visibility public)
     (impl)
     (intf))
    ((name Persistent_cache)
     (obj_name micromega_plugin__Persistent_cache)
     (visibility public)
     (impl)
     (intf))
    ((name Polynomial)
     (obj_name micromega_plugin__Polynomial)
     (visibility public)
     (impl)
     (intf))
    ((name Simplex)
     (obj_name micromega_plugin__Simplex)
     (visibility public)
     (impl)
     (intf))
    ((name Sos)
     (obj_name micromega_plugin__Sos)
     (visibility public)
     (impl)
     (intf))
    ((name Sos_lib)
     (obj_name micromega_plugin__Sos_lib)
     (visibility public)
     (impl)
     (intf))
    ((name Sos_types)
     (obj_name micromega_plugin__Sos_types)
     (visibility public)
     (impl)
     (intf))
    ((name Vect)
     (obj_name micromega_plugin__Vect)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Micromega_plugin)
    (obj_name micromega_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.nsatz)
 (kind normal)
 (synopsis "Coq's nsatz solver plugin")
 (archives
  (byte plugins/nsatz/nsatz_plugin.cma)
  (native plugins/nsatz/nsatz_plugin.cmxa))
 (plugins
  (byte plugins/nsatz/nsatz_plugin.cma)
  (native plugins/nsatz/nsatz_plugin.cmxs))
 (native_archives plugins/nsatz/nsatz_plugin.a)
 (requires num coq.plugins.ltac)
 (main_module_name Nsatz_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Nsatz_plugin)
   (modules
    ((name G_nsatz)
     (obj_name nsatz_plugin__G_nsatz)
     (visibility public)
     (impl))
    ((name Ideal)
     (obj_name nsatz_plugin__Ideal)
     (visibility public)
     (impl)
     (intf))
    ((name Nsatz)
     (obj_name nsatz_plugin__Nsatz)
     (visibility public)
     (impl)
     (intf))
    ((name Polynom)
     (obj_name nsatz_plugin__Polynom)
     (visibility public)
     (impl)
     (intf))
    ((name Utile)
     (obj_name nsatz_plugin__Utile)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Nsatz_plugin)
    (obj_name nsatz_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.numeral_notation)
 (kind normal)
 (synopsis "Coq numeral notation plugin")
 (archives
  (byte plugins/numeral_notation/numeral_notation_plugin.cma)
  (native plugins/numeral_notation/numeral_notation_plugin.cmxa))
 (plugins
  (byte plugins/numeral_notation/numeral_notation_plugin.cma)
  (native plugins/numeral_notation/numeral_notation_plugin.cmxs))
 (native_archives plugins/numeral_notation/numeral_notation_plugin.a)
 (requires coq.vernac)
 (main_module_name Numeral_notation_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Numeral_notation_plugin)
   (modules
    ((name G_numeral)
     (obj_name numeral_notation_plugin__G_numeral)
     (visibility public)
     (impl))
    ((name Numeral)
     (obj_name numeral_notation_plugin__Numeral)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Numeral_notation_plugin)
    (obj_name numeral_notation_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.omega)
 (kind normal)
 (synopsis "Coq's omega plugin")
 (archives
  (byte plugins/omega/omega_plugin.cma)
  (native plugins/omega/omega_plugin.cmxa))
 (plugins
  (byte plugins/omega/omega_plugin.cma)
  (native plugins/omega/omega_plugin.cmxs))
 (native_archives plugins/omega/omega_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Omega_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Omega_plugin)
   (modules
    ((name Coq_omega)
     (obj_name omega_plugin__Coq_omega)
     (visibility public)
     (impl)
     (intf))
    ((name G_omega)
     (obj_name omega_plugin__G_omega)
     (visibility public)
     (impl))
    ((name Omega) (obj_name omega_plugin__Omega) (visibility public) (impl)))
   (alias_module
    (name Omega_plugin)
    (obj_name omega_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.r_syntax)
 (kind normal)
 (synopsis "Coq syntax plugin: reals")
 (archives
  (byte plugins/r_syntax/r_syntax_plugin.cma)
  (native plugins/r_syntax/r_syntax_plugin.cmxa))
 (plugins
  (byte plugins/r_syntax/r_syntax_plugin.cma)
  (native plugins/r_syntax/r_syntax_plugin.cmxs))
 (native_archives plugins/r_syntax/r_syntax_plugin.a)
 (requires coq.vernac)
 (main_module_name R_syntax_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name R_syntax_plugin)
   (modules
    ((name R_syntax)
     (obj_name r_syntax_plugin__R_syntax)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name R_syntax_plugin)
    (obj_name r_syntax_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.rtauto)
 (kind normal)
 (synopsis "Coq's rtauto plugin")
 (archives
  (byte plugins/rtauto/rtauto_plugin.cma)
  (native plugins/rtauto/rtauto_plugin.cmxa))
 (plugins
  (byte plugins/rtauto/rtauto_plugin.cma)
  (native plugins/rtauto/rtauto_plugin.cmxs))
 (native_archives plugins/rtauto/rtauto_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Rtauto_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Rtauto_plugin)
   (modules
    ((name G_rtauto)
     (obj_name rtauto_plugin__G_rtauto)
     (visibility public)
     (impl))
    ((name Proof_search)
     (obj_name rtauto_plugin__Proof_search)
     (visibility public)
     (impl)
     (intf))
    ((name Refl_tauto)
     (obj_name rtauto_plugin__Refl_tauto)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Rtauto_plugin)
    (obj_name rtauto_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.setoid_ring)
 (kind normal)
 (synopsis "Coq's setoid ring plugin")
 (archives
  (byte plugins/setoid_ring/newring_plugin.cma)
  (native plugins/setoid_ring/newring_plugin.cmxa))
 (plugins
  (byte plugins/setoid_ring/newring_plugin.cma)
  (native plugins/setoid_ring/newring_plugin.cmxs))
 (native_archives plugins/setoid_ring/newring_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Newring_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Newring_plugin)
   (modules
    ((name G_newring)
     (obj_name newring_plugin__G_newring)
     (visibility public)
     (impl))
    ((name Newring)
     (obj_name newring_plugin__Newring)
     (visibility public)
     (impl)
     (intf))
    ((name Newring_ast)
     (obj_name newring_plugin__Newring_ast)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Newring_plugin)
    (obj_name newring_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.ssreflect)
 (kind normal)
 (synopsis "Coq's ssreflect plugin")
 (archives
  (byte plugins/ssreflect/ssreflect_plugin.cma)
  (native plugins/ssreflect/ssreflect_plugin.cmxa))
 (plugins
  (byte plugins/ssreflect/ssreflect_plugin.cma)
  (native plugins/ssreflect/ssreflect_plugin.cmxs))
 (native_archives plugins/ssreflect/ssreflect_plugin.a)
 (requires coq.plugins.ssrmatching)
 (main_module_name Ssreflect_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Ssreflect_plugin)
   (modules
    ((name Ssrast)
     (obj_name ssreflect_plugin__Ssrast)
     (visibility public)
     (intf))
    ((name Ssrbwd)
     (obj_name ssreflect_plugin__Ssrbwd)
     (visibility public)
     (impl)
     (intf))
    ((name Ssrcommon)
     (obj_name ssreflect_plugin__Ssrcommon)
     (visibility public)
     (impl)
     (intf))
    ((name Ssrelim)
     (obj_name ssreflect_plugin__Ssrelim)
     (visibility public)
     (impl)
     (intf))
    ((name Ssrequality)
     (obj_name ssreflect_plugin__Ssrequality)
     (visibility public)
     (impl)
     (intf))
    ((name Ssrfwd)
     (obj_name ssreflect_plugin__Ssrfwd)
     (visibility public)
     (impl)
     (intf))
    ((name Ssripats)
     (obj_name ssreflect_plugin__Ssripats)
     (visibility public)
     (impl)
     (intf))
    ((name Ssrparser)
     (obj_name ssreflect_plugin__Ssrparser)
     (visibility public)
     (impl)
     (intf))
    ((name Ssrprinters)
     (obj_name ssreflect_plugin__Ssrprinters)
     (visibility public)
     (impl)
     (intf))
    ((name Ssrtacticals)
     (obj_name ssreflect_plugin__Ssrtacticals)
     (visibility public)
     (impl)
     (intf))
    ((name Ssrvernac)
     (obj_name ssreflect_plugin__Ssrvernac)
     (visibility public)
     (impl)
     (intf))
    ((name Ssrview)
     (obj_name ssreflect_plugin__Ssrview)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Ssreflect_plugin)
    (obj_name ssreflect_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.ssrmatching)
 (kind normal)
 (synopsis "Coq ssrmatching plugin")
 (archives
  (byte plugins/ssrmatching/ssrmatching_plugin.cma)
  (native plugins/ssrmatching/ssrmatching_plugin.cmxa))
 (plugins
  (byte plugins/ssrmatching/ssrmatching_plugin.cma)
  (native plugins/ssrmatching/ssrmatching_plugin.cmxs))
 (native_archives plugins/ssrmatching/ssrmatching_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Ssrmatching_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Ssrmatching_plugin)
   (modules
    ((name G_ssrmatching)
     (obj_name ssrmatching_plugin__G_ssrmatching)
     (visibility public)
     (impl)
     (intf))
    ((name Ssrmatching)
     (obj_name ssrmatching_plugin__Ssrmatching)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Ssrmatching_plugin)
    (obj_name ssrmatching_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.string_notation)
 (kind normal)
 (synopsis "Coq string notation plugin")
 (archives
  (byte plugins/string_notation/string_notation_plugin.cma)
  (native plugins/string_notation/string_notation_plugin.cmxa))
 (plugins
  (byte plugins/string_notation/string_notation_plugin.cma)
  (native plugins/string_notation/string_notation_plugin.cmxs))
 (native_archives plugins/string_notation/string_notation_plugin.a)
 (requires coq.vernac)
 (main_module_name String_notation_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name String_notation_plugin)
   (modules
    ((name G_string)
     (obj_name string_notation_plugin__G_string)
     (visibility public)
     (impl))
    ((name String_notation)
     (obj_name string_notation_plugin__String_notation)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name String_notation_plugin)
    (obj_name string_notation_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.tauto)
 (kind normal)
 (synopsis "Coq's tauto tactic")
 (archives
  (byte plugins/tauto/tauto_plugin.cma)
  (native plugins/tauto/tauto_plugin.cmxa))
 (plugins
  (byte plugins/tauto/tauto_plugin.cma)
  (native plugins/tauto/tauto_plugin.cmxs))
 (native_archives plugins/tauto/tauto_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Tauto_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Tauto_plugin)
   (modules
    ((name Tauto)
     (obj_name tauto_plugin__Tauto)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Tauto_plugin)
    (obj_name tauto_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.tutorial.p0)
 (kind normal)
 (archives
  (byte plugins/tutorial/p0/tuto0_plugin.cma)
  (native plugins/tutorial/p0/tuto0_plugin.cmxa))
 (plugins
  (byte plugins/tutorial/p0/tuto0_plugin.cma)
  (native plugins/tutorial/p0/tuto0_plugin.cmxs))
 (native_archives plugins/tutorial/p0/tuto0_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Tuto0_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Tuto0_plugin)
   (modules
    ((name G_tuto0)
     (obj_name tuto0_plugin__G_tuto0)
     (visibility public)
     (impl))
    ((name Tuto0_main)
     (obj_name tuto0_plugin__Tuto0_main)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Tuto0_plugin)
    (obj_name tuto0_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.tutorial.p1)
 (kind normal)
 (archives
  (byte plugins/tutorial/p1/tuto1_plugin.cma)
  (native plugins/tutorial/p1/tuto1_plugin.cmxa))
 (plugins
  (byte plugins/tutorial/p1/tuto1_plugin.cma)
  (native plugins/tutorial/p1/tuto1_plugin.cmxs))
 (native_archives plugins/tutorial/p1/tuto1_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Tuto1_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Tuto1_plugin)
   (modules
    ((name G_tuto1)
     (obj_name tuto1_plugin__G_tuto1)
     (visibility public)
     (impl))
    ((name Simple_check)
     (obj_name tuto1_plugin__Simple_check)
     (visibility public)
     (impl)
     (intf))
    ((name Simple_declare)
     (obj_name tuto1_plugin__Simple_declare)
     (visibility public)
     (impl)
     (intf))
    ((name Simple_print)
     (obj_name tuto1_plugin__Simple_print)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Tuto1_plugin)
    (obj_name tuto1_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.tutorial.p2)
 (kind normal)
 (archives
  (byte plugins/tutorial/p2/tuto2_plugin.cma)
  (native plugins/tutorial/p2/tuto2_plugin.cmxa))
 (plugins
  (byte plugins/tutorial/p2/tuto2_plugin.cma)
  (native plugins/tutorial/p2/tuto2_plugin.cmxs))
 (native_archives plugins/tutorial/p2/tuto2_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Tuto2_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Tuto2_plugin)
   (modules
    ((name Demo) (obj_name tuto2_plugin__Demo) (visibility public) (impl)))
   (alias_module
    (name Tuto2_plugin)
    (obj_name tuto2_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.plugins.tutorial.p3)
 (kind normal)
 (archives
  (byte plugins/tutorial/p3/tuto3_plugin.cma)
  (native plugins/tutorial/p3/tuto3_plugin.cmxa))
 (plugins
  (byte plugins/tutorial/p3/tuto3_plugin.cma)
  (native plugins/tutorial/p3/tuto3_plugin.cmxs))
 (native_archives plugins/tutorial/p3/tuto3_plugin.a)
 (requires coq.plugins.ltac)
 (main_module_name Tuto3_plugin)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Tuto3_plugin)
   (modules
    ((name Construction_game)
     (obj_name tuto3_plugin__Construction_game)
     (visibility public)
     (impl)
     (intf))
    ((name G_tuto3)
     (obj_name tuto3_plugin__G_tuto3)
     (visibility public)
     (impl))
    ((name Tuto_tactic)
     (obj_name tuto3_plugin__Tuto_tactic)
     (visibility public)
     (impl)
     (intf)))
   (alias_module
    (name Tuto3_plugin)
    (obj_name tuto3_plugin)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
(library
 (name coq.pretyping)
 (kind normal)
 (synopsis "Coq's Type Inference Component (Pretyper)")
 (archives (byte pretyping/pretyping.cma) (native pretyping/pretyping.cmxa))
 (plugins (byte pretyping/pretyping.cma) (native pretyping/pretyping.cmxs))
 (native_archives pretyping/pretyping.a)
 (requires coq.engine)
 (modes byte)
 (modules
  (unwrapped
   ((name Arguments_renaming)
    (obj_name arguments_renaming)
    (visibility public)
    (impl)
    (intf))
   ((name Cases) (obj_name cases) (visibility public) (impl) (intf))
   ((name Cbv) (obj_name cbv) (visibility public) (impl) (intf))
   ((name Classops) (obj_name classops) (visibility public) (impl) (intf))
   ((name Coercion) (obj_name coercion) (visibility public) (impl) (intf))
   ((name Constr_matching)
    (obj_name constr_matching)
    (visibility public)
    (impl)
    (intf))
   ((name Detyping) (obj_name detyping) (visibility public) (impl) (intf))
   ((name Evarconv) (obj_name evarconv) (visibility public) (impl) (intf))
   ((name Evardefine) (obj_name evardefine) (visibility public) (impl) (intf))
   ((name Evarsolve) (obj_name evarsolve) (visibility public) (impl) (intf))
   ((name Find_subterm)
    (obj_name find_subterm)
    (visibility public)
    (impl)
    (intf))
   ((name Geninterp) (obj_name geninterp) (visibility public) (impl) (intf))
   ((name GlobEnv) (obj_name globEnv) (visibility public) (impl) (intf))
   ((name Glob_ops) (obj_name glob_ops) (visibility public) (impl) (intf))
   ((name Glob_term) (obj_name glob_term) (visibility public) (impl))
   ((name Heads) (obj_name heads) (visibility public) (impl) (intf))
   ((name Indrec) (obj_name indrec) (visibility public) (impl) (intf))
   ((name Inductiveops)
    (obj_name inductiveops)
    (visibility public)
    (impl)
    (intf))
   ((name InferCumulativity)
    (obj_name inferCumulativity)
    (visibility public)
    (impl)
    (intf))
   ((name Locus) (obj_name locus) (visibility public) (impl))
   ((name Locusops) (obj_name locusops) (visibility public) (impl) (intf))
   ((name Ltac_pretype) (obj_name ltac_pretype) (visibility public) (impl))
   ((name Nativenorm) (obj_name nativenorm) (visibility public) (impl) (intf))
   ((name Pattern) (obj_name pattern) (visibility public) (impl))
   ((name Patternops) (obj_name patternops) (visibility public) (impl) (intf))
   ((name Pretype_errors)
    (obj_name pretype_errors)
    (visibility public)
    (impl)
    (intf))
   ((name Pretyping) (obj_name pretyping) (visibility public) (impl) (intf))
   ((name Program) (obj_name program) (visibility public) (impl) (intf))
   ((name Recordops) (obj_name recordops) (visibility public) (impl) (intf))
   ((name Reductionops)
    (obj_name reductionops)
    (visibility public)
    (impl)
    (intf))
   ((name Retyping) (obj_name retyping) (visibility public) (impl) (intf))
   ((name Tacred) (obj_name tacred) (visibility public) (impl) (intf))
   ((name Typeclasses)
    (obj_name typeclasses)
    (visibility public)
    (impl)
    (intf))
   ((name Typeclasses_errors)
    (obj_name typeclasses_errors)
    (visibility public)
    (impl)
    (intf))
   ((name Typing) (obj_name typing) (visibility public) (impl) (intf))
   ((name Unification)
    (obj_name unification)
    (visibility public)
    (impl)
    (intf))
   ((name Vnorm) (obj_name vnorm) (visibility public) (impl) (intf)))))
(library
 (name coq.printing)
 (kind normal)
 (synopsis "Coq's Term Pretty Printing Library")
 (archives (byte printing/printing.cma) (native printing/printing.cmxa))
 (plugins (byte printing/printing.cma) (native printing/printing.cmxs))
 (native_archives printing/printing.a)
 (requires coq.parsing coq.proofs)
 (modes byte)
 (modules
  (unwrapped
   ((name Genprint) (obj_name genprint) (visibility public) (impl) (intf))
   ((name Ppconstr) (obj_name ppconstr) (visibility public) (impl) (intf))
   ((name Pputils) (obj_name pputils) (visibility public) (impl) (intf))
   ((name Prettyp) (obj_name prettyp) (visibility public) (impl) (intf))
   ((name Printer) (obj_name printer) (visibility public) (impl) (intf))
   ((name Printmod) (obj_name printmod) (visibility public) (impl) (intf))
   ((name Proof_diffs)
    (obj_name proof_diffs)
    (visibility public)
    (impl)
    (intf)))))
(library
 (name coq.proofs)
 (kind normal)
 (synopsis
  "Coq's Higher-level Refinement Proof Engine and Top-level Proof Structure")
 (archives (byte proofs/proofs.cma) (native proofs/proofs.cmxa))
 (plugins (byte proofs/proofs.cma) (native proofs/proofs.cmxs))
 (native_archives proofs/proofs.a)
 (requires coq.interp)
 (modes byte)
 (modules
  (unwrapped
   ((name Clenv) (obj_name clenv) (visibility public) (impl) (intf))
   ((name Clenvtac) (obj_name clenvtac) (visibility public) (impl) (intf))
   ((name Evar_refiner)
    (obj_name evar_refiner)
    (visibility public)
    (impl)
    (intf))
   ((name Goal) (obj_name goal) (visibility public) (impl) (intf))
   ((name Goal_select)
    (obj_name goal_select)
    (visibility public)
    (impl)
    (intf))
   ((name Logic) (obj_name logic) (visibility public) (impl) (intf))
   ((name Miscprint) (obj_name miscprint) (visibility public) (impl) (intf))
   ((name Pfedit) (obj_name pfedit) (visibility public) (impl) (intf))
   ((name Proof) (obj_name proof) (visibility public) (impl) (intf))
   ((name Proof_bullet)
    (obj_name proof_bullet)
    (visibility public)
    (impl)
    (intf))
   ((name Proof_global)
    (obj_name proof_global)
    (visibility public)
    (impl)
    (intf))
   ((name Refine) (obj_name refine) (visibility public) (impl) (intf))
   ((name Refiner) (obj_name refiner) (visibility public) (impl) (intf))
   ((name Tacmach) (obj_name tacmach) (visibility public) (impl) (intf))
   ((name Tactypes) (obj_name tactypes) (visibility public) (impl)))))
(library
 (name coq.stm)
 (kind normal)
 (synopsis "Coq's Document Manager and Proof Checking Scheduler")
 (archives (byte stm/stm.cma) (native stm/stm.cmxa))
 (plugins (byte stm/stm.cma) (native stm/stm.cmxs))
 (native_archives stm/stm.a)
 (requires coq.vernac)
 (modes byte)
 (modules
  (unwrapped
   ((name AsyncTaskQueue)
    (obj_name asyncTaskQueue)
    (visibility public)
    (impl)
    (intf))
   ((name CoqworkmgrApi)
    (obj_name coqworkmgrApi)
    (visibility public)
    (impl)
    (intf))
   ((name Dag) (obj_name dag) (visibility public) (impl) (intf))
   ((name ProofBlockDelimiter)
    (obj_name proofBlockDelimiter)
    (visibility public)
    (impl)
    (intf))
   ((name Spawned) (obj_name spawned) (visibility public) (impl) (intf))
   ((name Stm) (obj_name stm) (visibility public) (impl) (intf))
   ((name TQueue) (obj_name tQueue) (visibility public) (impl) (intf))
   ((name Vcs) (obj_name vcs) (visibility public) (impl) (intf))
   ((name Vernac_classifier)
    (obj_name vernac_classifier)
    (visibility public)
    (impl)
    (intf))
   ((name Vio_checking)
    (obj_name vio_checking)
    (visibility public)
    (impl)
    (intf))
   ((name WorkerPool) (obj_name workerPool) (visibility public) (impl) (intf)))))
(library
 (name coq.tactics)
 (kind normal)
 (synopsis "Coq's Core Tactics [ML implementation]")
 (archives (byte tactics/tactics.cma) (native tactics/tactics.cmxa))
 (plugins (byte tactics/tactics.cma) (native tactics/tactics.cmxs))
 (native_archives tactics/tactics.a)
 (requires coq.printing)
 (modes byte)
 (modules
  (unwrapped
   ((name Abstract) (obj_name abstract) (visibility public) (impl) (intf))
   ((name Auto) (obj_name auto) (visibility public) (impl) (intf))
   ((name Autorewrite)
    (obj_name autorewrite)
    (visibility public)
    (impl)
    (intf))
   ((name Btermdn) (obj_name btermdn) (visibility public) (impl) (intf))
   ((name Class_tactics)
    (obj_name class_tactics)
    (visibility public)
    (impl)
    (intf))
   ((name Contradiction)
    (obj_name contradiction)
    (visibility public)
    (impl)
    (intf))
   ((name Dn) (obj_name dn) (visibility public) (impl) (intf))
   ((name Dnet) (obj_name dnet) (visibility public) (impl) (intf))
   ((name Eauto) (obj_name eauto) (visibility public) (impl) (intf))
   ((name Elim) (obj_name elim) (visibility public) (impl) (intf))
   ((name Elimschemes)
    (obj_name elimschemes)
    (visibility public)
    (impl)
    (intf))
   ((name Eqdecide) (obj_name eqdecide) (visibility public) (impl) (intf))
   ((name Eqschemes) (obj_name eqschemes) (visibility public) (impl) (intf))
   ((name Equality) (obj_name equality) (visibility public) (impl) (intf))
   ((name Genredexpr) (obj_name genredexpr) (visibility public) (impl))
   ((name Hints) (obj_name hints) (visibility public) (impl) (intf))
   ((name Hipattern) (obj_name hipattern) (visibility public) (impl) (intf))
   ((name Ind_tables) (obj_name ind_tables) (visibility public) (impl) (intf))
   ((name Inv) (obj_name inv) (visibility public) (impl) (intf))
   ((name Leminv) (obj_name leminv) (visibility public) (impl) (intf))
   ((name Ppred) (obj_name ppred) (visibility public) (impl) (intf))
   ((name Redexpr) (obj_name redexpr) (visibility public) (impl) (intf))
   ((name Redops) (obj_name redops) (visibility public) (impl) (intf))
   ((name Tacticals) (obj_name tacticals) (visibility public) (impl) (intf))
   ((name Tactics) (obj_name tactics) (visibility public) (impl) (intf))
   ((name Term_dnet) (obj_name term_dnet) (visibility public) (impl) (intf)))))
(library
 (name coq.top_printers)
 (kind normal)
 (synopsis "Coq's Debug Printers")
 (archives
  (byte top_printers/top_printers.cma)
  (native top_printers/top_printers.cmxa))
 (plugins
  (byte top_printers/top_printers.cma)
  (native top_printers/top_printers.cmxs))
 (native_archives top_printers/top_printers.a)
 (requires coq.toplevel coq.plugins.ltac)
 (modes byte)
 (modules
  (unwrapped
   ((name Dynlink) (obj_name dynlink) (visibility public) (impl))
   ((name Header) (obj_name header) (visibility public) (impl))
   ((name Top_printers)
    (obj_name top_printers)
    (visibility public)
    (impl)
    (intf))
   ((name Vm_printers) (obj_name vm_printers) (visibility public) (impl)))))
(library
 (name coq.toplevel)
 (kind normal)
 (synopsis "Coq's Interactive Shell [terminal-based]")
 (archives (byte toplevel/toplevel.cma) (native toplevel/toplevel.cmxa))
 (plugins (byte toplevel/toplevel.cma) (native toplevel/toplevel.cmxs))
 (native_archives toplevel/toplevel.a)
 (requires num coq.stm)
 (modes byte)
 (modules
  (unwrapped
   ((name Ccompile) (obj_name ccompile) (visibility public) (impl) (intf))
   ((name Coqargs) (obj_name coqargs) (visibility public) (impl) (intf))
   ((name Coqc) (obj_name coqc) (visibility public) (impl) (intf))
   ((name Coqcargs) (obj_name coqcargs) (visibility public) (impl) (intf))
   ((name Coqinit) (obj_name coqinit) (visibility public) (impl) (intf))
   ((name Coqloop) (obj_name coqloop) (visibility public) (impl) (intf))
   ((name Coqtop) (obj_name coqtop) (visibility public) (impl) (intf))
   ((name G_toplevel) (obj_name g_toplevel) (visibility public) (impl))
   ((name Usage) (obj_name usage) (visibility public) (impl) (intf))
   ((name Vernac) (obj_name vernac) (visibility public) (impl) (intf))
   ((name WorkerLoop) (obj_name workerLoop) (visibility public) (impl) (intf)))))
(library
 (name coq.vernac)
 (kind normal)
 (synopsis "Coq's Vernacular Language")
 (archives (byte vernac/vernac.cma) (native vernac/vernac.cmxa))
 (plugins (byte vernac/vernac.cma) (native vernac/vernac.cmxs))
 (native_archives vernac/vernac.a)
 (requires coq.tactics coq.parsing)
 (modes byte)
 (modules
  (unwrapped
   ((name Assumptions)
    (obj_name assumptions)
    (visibility public)
    (impl)
    (intf))
   ((name Attributes) (obj_name attributes) (visibility public) (impl) (intf))
   ((name Auto_ind_decl)
    (obj_name auto_ind_decl)
    (visibility public)
    (impl)
    (intf))
   ((name Class) (obj_name class) (visibility public) (impl) (intf))
   ((name Classes) (obj_name classes) (visibility public) (impl) (intf))
   ((name ComAssumption)
    (obj_name comAssumption)
    (visibility public)
    (impl)
    (intf))
   ((name ComDefinition)
    (obj_name comDefinition)
    (visibility public)
    (impl)
    (intf))
   ((name ComFixpoint)
    (obj_name comFixpoint)
    (visibility public)
    (impl)
    (intf))
   ((name ComInductive)
    (obj_name comInductive)
    (visibility public)
    (impl)
    (intf))
   ((name ComProgramFixpoint)
    (obj_name comProgramFixpoint)
    (visibility public)
    (impl)
    (intf))
   ((name DeclareDef) (obj_name declareDef) (visibility public) (impl) (intf))
   ((name Egramcoq) (obj_name egramcoq) (visibility public) (impl) (intf))
   ((name Egramml) (obj_name egramml) (visibility public) (impl) (intf))
   ((name ExplainErr) (obj_name explainErr) (visibility public) (impl) (intf))
   ((name G_proofs) (obj_name g_proofs) (visibility public) (impl))
   ((name G_vernac) (obj_name g_vernac) (visibility public) (impl))
   ((name Himsg) (obj_name himsg) (visibility public) (impl) (intf))
   ((name Indschemes) (obj_name indschemes) (visibility public) (impl) (intf))
   ((name Lemmas) (obj_name lemmas) (visibility public) (impl) (intf))
   ((name Locality) (obj_name locality) (visibility public) (impl) (intf))
   ((name Metasyntax) (obj_name metasyntax) (visibility public) (impl) (intf))
   ((name Mltop) (obj_name mltop) (visibility public) (impl) (intf))
   ((name Obligations)
    (obj_name obligations)
    (visibility public)
    (impl)
    (intf))
   ((name Ppvernac) (obj_name ppvernac) (visibility public) (impl) (intf))
   ((name Proof_using)
    (obj_name proof_using)
    (visibility public)
    (impl)
    (intf))
   ((name Pvernac) (obj_name pvernac) (visibility public) (impl) (intf))
   ((name Record) (obj_name record) (visibility public) (impl) (intf))
   ((name Search) (obj_name search) (visibility public) (impl) (intf))
   ((name Topfmt) (obj_name topfmt) (visibility public) (impl) (intf))
   ((name Vernacentries)
    (obj_name vernacentries)
    (visibility public)
    (impl)
    (intf))
   ((name Vernacexpr) (obj_name vernacexpr) (visibility public) (impl))
   ((name Vernacextend)
    (obj_name vernacextend)
    (visibility public)
    (impl)
    (intf))
   ((name Vernacprop) (obj_name vernacprop) (visibility public) (impl) (intf))
   ((name Vernacstate)
    (obj_name vernacstate)
    (visibility public)
    (impl)
    (intf)))))
(library
 (name coq.vm)
 (kind normal)
 (synopsis "Coq's Kernel Abstract Reduction Machine [C implementation]")
 (archives (byte vm/byterun.cma) (native vm/byterun.cmxa))
 (plugins (byte vm/byterun.cma) (native vm/byterun.cmxs))
 (foreign_objects
  vm/coq_fix_code.o
  vm/coq_interp.o
  vm/coq_memory.o
  vm/coq_values.o)
 (foreign_archives vm/libbyterun_stubs.a)
 (native_archives vm/byterun.a)
 (main_module_name Byterun)
 (modes byte)
 (modules
  (wrapped
   (main_module_name Byterun)
   (alias_module
    (name Byterun)
    (obj_name byterun)
    (visibility public)
    (kind alias)
    (impl))
   (wrapped true))))
